{"version":3,"sources":["data/data.js","D3/BarChart.js","D3/LineGraph.js","App.js","index.js"],"names":["mockdata","M1","H1","D","BarChart","objdata","datahold","yaxis_index","data_type","data","tm","time","tm_lable","drawChart","margin","chart","width","height","xScale","d3","domain","map","d","range","yScale","colorScale","selectAll","enter","append","classed","attr","bandwidth","style","i","text","xAxis","scale","call","yAxis","ticks","select","tickSize","tickFormat","plot","html","useEffect","graph","id","LineGraph","a","lineData","push","x","y","Math","round","random","line","dt","remove","datum","transition","duration","initCall","LineChart","class","App","useState","setObjdata","UpdateData","UpdateGraph","UpdateTime","type","onClick","ReactDOM","render","document","getElementById"],"mappings":"4OAsPeA,EAtPE,CACbC,GAAI,CAAC,CACG,WACA,IACA,EACA,EACA,EACA,KACA,MACA,MACA,IACF,CACE,WACA,IACA,EACA,EACA,EACA,KACA,MACA,MACA,IACF,CACE,WACA,IACA,EACA,EACA,EACA,KACA,MACA,MACA,IACF,CACE,WACA,IACA,EACA,EACA,EACA,KACA,MACA,MACA,IACF,CACE,WACA,IACA,EACA,EACA,EACA,KACA,MACA,MACA,IACF,CACE,WACA,IACA,EACA,EACA,EACA,KACA,MACA,MACA,IACF,CACE,WACA,IACA,EACA,EACA,EACA,KACA,MACA,MACA,IACF,CACE,SACA,IACA,EACA,EACA,EACA,KACA,MACA,MACA,KAERC,GAAK,CAAC,CACF,WACA,IACA,EACA,EACA,EACA,KACA,MACA,MACA,IACF,CACE,WACA,IACA,EACA,EACA,EACA,KACA,MACA,MACA,IACF,CACE,WACA,IACA,EACA,EACA,EACA,KACA,MACA,MACA,IACF,CACE,WACA,IACA,EACA,EACA,EACA,KACA,MACA,MACA,IACF,CACE,WACA,IACA,EACA,EACA,EACA,KACA,MACA,MACA,IACF,CACE,WACA,IACA,EACA,EACA,EACA,KACA,MACA,MACA,IACF,CACE,WACA,IACA,EACA,EACA,EACA,KACA,MACA,MACA,IACF,CACE,WACA,IACA,EACA,EACA,EACA,KACA,MACA,MACA,KAEJC,EAAI,CAAC,CACD,WACA,IACA,EACA,EACA,EACA,KACA,MACA,MACA,IACF,CACE,WACA,IACA,EACA,EACA,EACA,KACA,MACA,MACA,IACF,CACE,WACA,IACA,EACA,EACA,EACA,KACA,MACA,MACA,IACF,CACE,WACA,IACA,EACA,EACA,EACA,KACA,MACA,MACA,IACF,CACE,WACA,IACA,EACA,EACA,EACA,KACA,MACA,MACA,IACF,CACE,WACA,IACA,EACA,EACA,EACA,KACA,MACA,MACA,IACF,CACE,WACA,IACA,EACA,EACA,EACA,KACA,MACA,MACA,IAC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","file":"static/js/main.00b7b807.chunk.js","sourcesContent":["const mockdata = {\n    M1: [[\n            1637089200, // Unix timestamp\n            120, // number of successful requests (2xx)\n            0, // number of rejected requests (4xx)\n            0, // number of rate limited requests (429)\n            0, // number of failed requests (5xx)\n            0.015, // median API latency\n            1.023, // 99th percentile API latency\n            65536, // data traffic in bytes\n            42 // number of unique users in time-frame\n        ],[\n            1637089300, // Unix timestamp\n            121, // number of successful requests (2xx)\n            0, // number of rejected requests (4xx)\n            0, // number of rate limited requests (429)\n            0, // number of failed requests (5xx)\n            0.015, // median API latency\n            1.023, // 99th percentile API latency\n            65536, // data traffic in bytes\n            42 // number of unique users in time-frame\n        ],[\n            1637089400, // Unix timestamp\n            122, // number of successful requests (2xx)\n            0, // number of rejected requests (4xx)\n            0, // number of rate limited requests (429)\n            0, // number of failed requests (5xx)\n            0.015, // median API latency\n            1.023, // 99th percentile API latency\n            65536, // data traffic in bytes\n            42 // number of unique users in time-frame\n        ],[\n            1637089600, // Unix timestamp\n            123, // number of successful requests (2xx)\n            0, // number of rejected requests (4xx)\n            0, // number of rate limited requests (429)\n            0, // number of failed requests (5xx)\n            0.015, // median API latency\n            1.023, // 99th percentile API latency\n            65536, // data traffic in bytes\n            42 // number of unique users in time-frame\n        ],[\n            1637089700, // Unix timestamp\n            124, // number of successful requests (2xx)\n            0, // number of rejected requests (4xx)\n            0, // number of rate limited requests (429)\n            0, // number of failed requests (5xx)\n            0.015, // median API latency\n            1.023, // 99th percentile API latency\n            65536, // data traffic in bytes\n            42 // number of unique users in time-frame\n        ],[\n            1637089800, // Unix timestamp\n            125, // number of successful requests (2xx)\n            0, // number of rejected requests (4xx)\n            0, // number of rate limited requests (429)\n            0, // number of failed requests (5xx)\n            0.015, // median API latency\n            1.023, // 99th percentile API latency\n            65536, // data traffic in bytes\n            42 // number of unique users in time-frame\n        ],[\n            1637089900, // Unix timestamp\n            126, // number of successful requests (2xx)\n            0, // number of rejected requests (4xx)\n            0, // number of rate limited requests (429)\n            0, // number of failed requests (5xx)\n            0.015, // median API latency\n            1.023, // 99th percentile API latency\n            65536, // data traffic in bytes\n            42 // number of unique users in time-frame\n        ],[\n            1637090000, // Unix timestamp\n            127, // number of successful requests (2xx)\n            0, // number of rejected requests (4xx)\n            0, // number of rate limited requests (429)\n            0, // number of failed requests (5xx)\n            0.015, // median API latency\n            1.023, // 99th percentile API latency\n            65536, // data traffic in bytes\n            42 // number of unique users in time-frame\n        ]],\n    H1:  [[\n        1637189200, // Unix timestamp\n        120, // number of successful requests (2xx)\n        0, // number of rejected requests (4xx)\n        0, // number of rate limited requests (429)\n        0, // number of failed requests (5xx)\n        0.015, // median API latency\n        1.023, // 99th percentile API latency\n        65536, // data traffic in bytes\n        42 // number of unique users in time-frame\n    ],[\n        1637289200, // Unix timestamp\n        120, // number of successful requests (2xx)\n        0, // number of rejected requests (4xx)\n        0, // number of rate limited requests (429)\n        0, // number of failed requests (5xx)\n        0.015, // median API latency\n        1.023, // 99th percentile API latency\n        65536, // data traffic in bytes\n        42 // number of unique users in time-frame\n    ],[\n        1637389200, // Unix timestamp\n        120, // number of successful requests (2xx)\n        0, // number of rejected requests (4xx)\n        0, // number of rate limited requests (429)\n        0, // number of failed requests (5xx)\n        0.015, // median API latency\n        1.023, // 99th percentile API latency\n        65536, // data traffic in bytes\n        42 // number of unique users in time-frame\n    ],[\n        1637489200, // Unix timestamp\n        120, // number of successful requests (2xx)\n        0, // number of rejected requests (4xx)\n        0, // number of rate limited requests (429)\n        0, // number of failed requests (5xx)\n        0.015, // median API latency\n        1.023, // 99th percentile API latency\n        65536, // data traffic in bytes\n        42 // number of unique users in time-frame\n    ],[\n        1637589200, // Unix timestamp\n        120, // number of successful requests (2xx)\n        0, // number of rejected requests (4xx)\n        0, // number of rate limited requests (429)\n        0, // number of failed requests (5xx)\n        0.015, // median API latency\n        1.023, // 99th percentile API latency\n        65536, // data traffic in bytes\n        42 // number of unique users in time-frame\n    ],[\n        1637689200, // Unix timestamp\n        120, // number of successful requests (2xx)\n        0, // number of rejected requests (4xx)\n        0, // number of rate limited requests (429)\n        0, // number of failed requests (5xx)\n        0.015, // median API latency\n        1.023, // 99th percentile API latency\n        65536, // data traffic in bytes\n        42 // number of unique users in time-frame\n    ],[\n        1637789200, // Unix timestamp\n        120, // number of successful requests (2xx)\n        0, // number of rejected requests (4xx)\n        0, // number of rate limited requests (429)\n        0, // number of failed requests (5xx)\n        0.015, // median API latency\n        1.023, // 99th percentile API latency\n        65536, // data traffic in bytes\n        42 // number of unique users in time-frame\n    ],[\n        1637889200, // Unix timestamp\n        120, // number of successful requests (2xx)\n        0, // number of rejected requests (4xx)\n        0, // number of rate limited requests (429)\n        0, // number of failed requests (5xx)\n        0.015, // median API latency\n        1.023, // 99th percentile API latency\n        65536, // data traffic in bytes\n        42 // number of unique users in time-frame\n        ]],\n    D:  [[\n        1637089200, // Unix timestamp\n        120, // number of successful requests (2xx)\n        0, // number of rejected requests (4xx)\n        0, // number of rate limited requests (429)\n        0, // number of failed requests (5xx)\n        0.015, // median API latency\n        1.023, // 99th percentile API latency\n        65536, // data traffic in bytes\n        42 // number of unique users in time-frame\n    ],[\n        2637089200, // Unix timestamp\n        120, // number of successful requests (2xx)\n        0, // number of rejected requests (4xx)\n        0, // number of rate limited requests (429)\n        0, // number of failed requests (5xx)\n        0.015, // median API latency\n        1.023, // 99th percentile API latency\n        65536, // data traffic in bytes\n        42 // number of unique users in time-frame\n    ],[\n        3637089200, // Unix timestamp\n        120, // number of successful requests (2xx)\n        0, // number of rejected requests (4xx)\n        0, // number of rate limited requests (429)\n        0, // number of failed requests (5xx)\n        0.015, // median API latency\n        1.023, // 99th percentile API latency\n        65536, // data traffic in bytes\n        42 // number of unique users in time-frame\n    ],[\n        4637089200, // Unix timestamp\n        120, // number of successful requests (2xx)\n        0, // number of rejected requests (4xx)\n        0, // number of rate limited requests (429)\n        0, // number of failed requests (5xx)\n        0.015, // median API latency\n        1.023, // 99th percentile API latency\n        65536, // data traffic in bytes\n        42 // number of unique users in time-frame\n    ],[\n        5637089200, // Unix timestamp\n        120, // number of successful requests (2xx)\n        0, // number of rejected requests (4xx)\n        0, // number of rate limited requests (429)\n        0, // number of failed requests (5xx)\n        0.015, // median API latency\n        1.023, // 99th percentile API latency\n        65536, // data traffic in bytes\n        42 // number of unique users in time-frame\n    ],[\n        6637089200, // Unix timestamp\n        120, // number of successful requests (2xx)\n        0, // number of rejected requests (4xx)\n        0, // number of rate limited requests (429)\n        0, // number of failed requests (5xx)\n        0.015, // median API latency\n        1.023, // 99th percentile API latency\n        65536, // data traffic in bytes\n        42 // number of unique users in time-frame\n    ],[\n        7637089200, // Unix timestamp\n        120, // number of successful requests (2xx)\n        0, // number of rejected requests (4xx)\n        0, // number of rate limited requests (429)\n        0, // number of failed requests (5xx)\n        0.015, // median API latency\n        1.023, // 99th percentile API latency\n        65536, // data traffic in bytes\n        42 // number of unique users in time-frame\n    ],[\n        8637089200, // Unix timestamp\n        120, // number of successful requests (2xx)\n        0, // number of rejected requests (4xx)\n        0, // number of rate limited requests (429)\n        0, // number of failed requests (5xx)\n        0.015, // median API latency\n        1.023, // 99th percentile API latency\n        65536, // data traffic in bytes\n        42 // number of unique users in time-frame\n        ]]\n}                                    \n\nexport default mockdata;","import React, { useState, useEffect } from 'react';\r\nimport * as d3 from  'd3';\r\nimport mockdata from '../data/data';\r\n\r\n\r\nexport default function BarChart({ objdata }) {\r\n\r\n  var datahold = mockdata.M1;\r\n  var yaxis_index = 1;\r\n  var data_type = objdata.data;\r\n  var tm = objdata.time;\r\n  var tm_lable = tm;\r\n\r\n  \r\n  function plot(chart, width, height) {\r\n    \r\n    var data = datahold;\r\n\r\n    // create scales!\r\n    const xScale = d3.scaleBand()\r\n        .domain(data.map(d => d[0]))\r\n        .range([0, width]);\r\n    const yScale = d3.scaleLinear()\r\n        .domain([0, d3.max(data, d => d[yaxis_index])])\r\n        .range([height, 0]);\r\n    const colorScale = d3.scaleOrdinal(d3.schemeCategory10);\r\n\r\n    chart.selectAll('.bar')\r\n        .data(data)\r\n        .enter()\r\n        .append('rect')\r\n        .classed('bar', true)\r\n        .attr('x', d => xScale(d[0]))\r\n        .attr('y', d => yScale(d[yaxis_index]))\r\n        .attr('height', d => (height - yScale(d[yaxis_index])))\r\n        .attr('width', d => xScale.bandwidth())\r\n        .style('fill', (d, i) => colorScale(i));\r\n\r\n    chart.selectAll('.bar-label')\r\n        .data(data)\r\n        .enter()\r\n        .append('text')\r\n        .classed('bar-label', true)\r\n        .attr('x', d => xScale(d[0]) + xScale.bandwidth()/2)\r\n        .attr('dx', 0)\r\n        .attr('y', d => yScale(d[yaxis_index]))\r\n        .attr('dy', -6)\r\n        .text(d => d[yaxis_index]);\r\n\r\n    const xAxis = d3.axisBottom()\r\n        .scale(xScale);\r\n        \r\n    chart.append('g')\r\n        .classed('x axis', true)\r\n        .attr('transform', `translate(0,${height})`)\r\n        .call(xAxis);\r\n\r\n    const yAxis = d3.axisLeft()\r\n        .ticks(5)\r\n        .scale(yScale);\r\n\r\n    chart.append('g')\r\n        .classed('y axis', true)\r\n        .attr('transform', 'translate(0,0)')\r\n        .call(yAxis);\r\n\r\n    chart.select('.x.axis')\r\n        .append('text')\r\n        .attr('x',  width/2)\r\n        .attr('y', 60)\r\n        .attr('fill', '#000')\r\n        .style('font-size', '20px')\r\n        .style('text-anchor', 'middle')\r\n        .text(tm_lable);    \r\n        \r\n    chart.select('.y.axis')\r\n        .append('text')\r\n        .attr('x', 0)\r\n        .attr('y', 0)\r\n        .attr('transform', `translate(-50, ${height/2}) rotate(-90)`)\r\n        .attr('fill', '#000')\r\n        .style('font-size', '20px')\r\n        .style('text-anchor', 'middle')\r\n        .text(data_type);   \r\n        \r\n    const yGridlines = d3.axisLeft()\r\n        .scale(yScale)\r\n        .ticks(5)\r\n        .tickSize(-width,0,0)\r\n        .tickFormat('')\r\n    \r\n  }\r\n\r\n  function drawChart() {\r\n      const width = 800;\r\n      const height = 450;\r\n\r\n      const svg = d3.select('#BarChart')\r\n          .html('')\r\n          .append('svg')\r\n          .attr('id', 'chart')\r\n          .attr('width', width)\r\n          .attr('height', height);\r\n\r\n      const margin = {\r\n          top: 60,\r\n          bottom: 100,\r\n          left: 80,\r\n          right: 40\r\n      };\r\n\r\n      const chart = svg.append('g')\r\n          .classed('display', true)\r\n          .attr('transform', `translate(${margin.left},${margin.top})`);\r\n\r\n      const chartWidth = width - margin.left - margin.right;\r\n      const chartHeight = height - margin.top - margin.bottom\r\n      plot(chart, chartWidth, chartHeight);\r\n\r\n  }\r\n  \r\n  function initCall() {\r\n\r\n    yaxis_index = (data_type === \"Requests\") ? 1 \r\n        :(data_type === \"Latency\") ? 5\r\n        :(data_type === \"Trafic\") ? 7\r\n        :(data_type === \"Users\") ? 8\r\n        :1;\r\n\r\n\r\n    datahold = (tm === \"M1\") ? mockdata.M1 \r\n        :(tm === \"H1\") ? mockdata.H1 \r\n        :(tm === \"D\") ? mockdata.D\r\n        :mockdata.M1;\r\n\r\n    tm_lable = (tm === \"M1\") ? 'Minute Time Frame' \r\n        :(tm === \"H1\") ? 'Hourly Time Frame' \r\n        :(tm === \"D\") ? 'Daily Time Frame'  \r\n        :'Minute Time Frame';\r\n\r\n    drawChart();\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    \r\n    initCall();\r\n  }, [objdata]);\r\n \r\n  return(\r\n    <>\r\n\r\n        <div>\r\n            <br></br> {objdata.graph} Graph of <b>{objdata.data}</b> against <b>{objdata.time } time frame</b>\r\n        </div><br></br>\r\n\r\n        <div id=\"BarChart\"></div> \r\n    </>\r\n  )\r\n\r\n  }","import React, { useState, useEffect } from 'react';\r\nimport * as d3 from  'd3';\r\nimport mockdata from '../data/data';\r\n\r\nexport default function LineGraph({ objdata }) {\r\n  \r\n  \r\n  var datahold = mockdata.M1;\r\n  var yaxis_index = 1;\r\n  var data_type = objdata.data;\r\n  var tm = objdata.time;\r\n  var tm_lable = tm;\r\n\r\n\r\n  async function LineChart() {\r\n\r\n      var data = datahold;\r\n\r\n      // Generate random data for our line where x is [0,15) and y is between 0 and 100\r\n      let lineData = []\r\n      for(let i = 0; i < 15; i++) {\r\n          lineData.push({x: i + 1, y: Math.round(Math.random() * 100)})\r\n      }\r\n\r\n      const width = 800;\r\n      const height = 300;\r\n\r\n      // Create our scales to map our data values(domain) to coordinate values(range)\r\n      let xScale = d3.scaleBand()\r\n        .domain(data.map(d => d[0]))\r\n        .range([0, width]);\r\n        \r\n      let yScale = d3.scaleLinear()\r\n        .domain([0, d3.max(data, d => d[yaxis_index])])\r\n        .range([height, 0]);\r\n\r\n      // Generate a path with D3 based on the scaled data values\r\n      let line = d3.line()\r\n        .x(dt => xScale(dt[0]))\r\n        .y(dt => yScale(dt[yaxis_index]))\r\n      \r\n      // Generate the x and y Axis based on these scales\r\n      let xAxis = d3.axisBottom(xScale)\r\n      let yAxis = d3.axisLeft(yScale)\r\n\r\n      d3.select('#LineChart').selectAll(\"g\").remove()\r\n      \r\n      // Create the horizontal base line\r\n      d3.select('#LineChart').selectAll('path').datum(data) // Bind our data to the path element\r\n      .attr('d', d3.line().x(dt => xScale(dt[0])) // Set the path to our line function, but where x is the corresponding x\r\n      .y(yScale(0))).attr(\"stroke\", \"blue\").attr('fill', 'none') // Set the y to always be 0 and set stroke and fill color\r\n      .style('font-size', '20px')\r\n      \r\n\r\n      \r\n      d3.select('#LineChart').selectAll('path').transition().duration(1000) // Transition the line over 1 sec\r\n      .attr('d', line) // Set the path to our line variable (Which corresponds the actual path of the data)\r\n      \r\n      // Append the Axis to our LineChart svg\r\n      d3.select('#LineChart').append(\"g\")\r\n      .classed('x axis', true)\r\n      .attr(\"transform\", \"translate(0, 300)\").call(xAxis)\r\n\r\n      d3.select('#LineChart').append(\"g\")\r\n      .classed('y axis', true)\r\n      .attr(\"transform\", \"translate(0, 0)\").call(yAxis)\r\n\r\n      d3.select('#LineChart').select('.x.axis')\r\n        .append('text')\r\n        .attr('x',  width/2)\r\n        .attr('y', 60)\r\n        .attr('fill', '#000')\r\n        .style('font-size', '20px')\r\n        .style('text-anchor', 'middle')\r\n        .text(tm_lable);    \r\n        \r\n      d3.select('#LineChart').select('.y.axis')\r\n        .append('text')\r\n        .attr('x', 0)\r\n        .attr('y', 0)\r\n        .attr('transform', `translate(-50, ${height/2}) rotate(-90)`)\r\n        .attr('fill', '#000')\r\n        .style('font-size', '20px')\r\n        .style('text-anchor', 'middle')\r\n        .text(data_type);  \r\n  }\r\n\r\n\r\n  function initCall() {\r\n    \r\n\r\n    yaxis_index = (data_type === \"Requests\") ? 1 \r\n        :(data_type === \"Latency\") ? 5\r\n        :(data_type === \"Trafic\") ? 7\r\n        :(data_type === \"Users\") ? 8\r\n        :1;\r\n\r\n\r\n    datahold = (tm === \"M1\") ? mockdata.M1 \r\n        :(tm === \"H1\") ? mockdata.H1 \r\n        :(tm === \"D\") ? mockdata.D\r\n        :mockdata.M1;\r\n\r\n    tm_lable = (tm === \"M1\") ? 'Minute Time Frame' \r\n        :(tm === \"H1\") ? 'Hourly Time Frame' \r\n        :(tm === \"D\") ? 'Daily Time Frame'  \r\n        :'Minute Time Frame';\r\n\r\n        \r\n    LineChart();\r\n  }\r\n\r\n  useEffect(() => {\r\n\r\n\r\n    initCall();\r\n    \r\n  }, [objdata]);\r\n\r\n  return(\r\n    <>\r\n      <div>\r\n        <br></br> {objdata.graph} Graph of <b>{objdata.data}</b> against <b>{objdata.time } time frame</b>\r\n      </div><br></br>\r\n      \r\n      <div class=\"linecontainer\"><svg id=\"LineChart\" width = {350} height = {350}><path/></svg> </div>\r\n      \r\n    </>\r\n  )\r\n  \r\n}","import React, { useState, useEffect } from 'react';\nimport BarChart, {initCall} from \"./D3/BarChart\";\nimport LineGraph from \"./D3/LineGraph\";\n\nfunction App() {\n  const [objdata, setObjdata] = useState({data:\"Requests\", graph:\"Bar\", time:\"M1\"})\n\n  function UpdateData (data) {\n    setObjdata({data:data, graph:objdata.graph, time:objdata.time});\n  }\n\n  function UpdateGraph (graph) {\n    setObjdata({data:objdata.data, graph:graph, time:objdata.time});\n  }\n\n  function UpdateTime (time) {\n    setObjdata({data:objdata.data, graph:objdata.graph, time:time});\n  }\n\n  return (\n    <>\n      \n      <section>\n        <h4 class=\"title\">Block Watch Graph</h4> <br></br>\n        <div class=\"container\">\n          <div class=\"card shadow mb-1 bg-white rounded\" >\n            <div class=\"card-body\">\n              <div class=\"row\">\n                <div class=\"col-sm-7\">\n                  <button type=\"button\" class=\"btn btn-outline-dark bt-mr\" onClick={() => UpdateData('Requests')}>Requests</button>\n                  <button type=\"button\" class=\"btn btn-outline-dark bt-mrl\" onClick={() => UpdateData('Latency')}>Latency</button>\n                  <button type=\"button\" class=\"btn btn-outline-dark bt-mrl\" onClick={() => UpdateData('Trafic')}>Trafic</button>\n                  <button type=\"button\" class=\"btn btn-outline-dark bt-ml\" onClick={() => UpdateData('Users')}>Users</button>\n                </div>\n                <div class=\"col-sm-2\">\n                  <button type=\"button\" class=\"btn btn-link bt-mrl\" onClick={() => UpdateGraph('Line')}>Line</button>\n                  <button type=\"button\" class=\"btn btn-link bt-mrl\" onClick={() => UpdateGraph('Bar')}>Bar</button>\n                </div>\n                <div class=\"col-sm-3\">\n                  <button type=\"button\" class=\"btn btn-link bt-mrl\" onClick={() => UpdateTime('M1')}>M1</button>\n                  <button type=\"button\" class=\"btn btn-link bt-mrl\" onClick={() => UpdateTime('H1')}>H1</button>\n                  <button type=\"button\" class=\"btn btn-link bt-ml\" onClick={() => UpdateTime('D')}>D</button>\n                </div>\n              </div>\n\n              <div class=\"row\">\n                <div class=\"col-sm-12 col-lg-12\">\n                  {objdata.graph == 'Bar' && <BarChart objdata={objdata} /> }\n                  {objdata.graph == 'Line' && <LineGraph objdata={objdata} /> }\n                </div>\n              </div>\n              \n\n            </div>\n          </div>\n        </div>\n        \n      </section>\n\n    </>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}